{"ast":null,"code":"var _jsxFileName = \"/Users/sandeep/Code/AEM React Headless/aem-guides-wknd-graphql-main/react-app/src/utils/renderRichText.js\";\n/*\nCopyright 2022 Adobe\nAll Rights Reserved.\n\nNOTICE: Adobe permits you to use, modify, and distribute this file in\naccordance with the terms of the Adobe license agreement accompanying\nit.\n*/\nimport React, { isValidElement, cloneElement } from 'react';\n\n/**\n * Map of JSON nodeTypes to HTML formats\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultNodeMap = {\n  'header': (node, children, style) => {\n    var _style$node$style;\n    return (_style$node$style = style[node.style]) === null || _style$node$style === void 0 ? void 0 : _style$node$style.call(style, node, children);\n  },\n  'paragraph': (node, children) => /*#__PURE__*/_jsxDEV(\"p\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 38\n  }, this),\n  'unordered-list': (node, children) => /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 43\n  }, this),\n  'ordered-list': (node, children) => /*#__PURE__*/_jsxDEV(\"ol\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 41\n  }, this),\n  'list-item': (node, children) => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 38\n  }, this),\n  'table': (node, children) => /*#__PURE__*/_jsxDEV(\"table\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 34\n  }, this),\n  'table-body': (node, children) => /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 39\n  }, this),\n  'table-row': (node, children) => /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 38\n  }, this),\n  'table-data': (node, children) => /*#__PURE__*/_jsxDEV(\"td\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 39\n  }, this),\n  'link': node => /*#__PURE__*/_jsxDEV(\"a\", {\n    href: node.data.href,\n    target: node.data.target,\n    children: node.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 21\n  }, this),\n  'text': (node, format) => defaultRenderText(node, format),\n  'reference': node => defaultRenderImage(node)\n};\n\n/**\n * Map of JSON format variants to HTML equivalents\n */\nconst defaultTextFormat = {\n  'bold': value => /*#__PURE__*/_jsxDEV(\"b\", {\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 24\n  }, this),\n  'italic': value => /*#__PURE__*/_jsxDEV(\"i\", {\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 26\n  }, this),\n  'underline': value => /*#__PURE__*/_jsxDEV(\"u\", {\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 29\n  }, this)\n};\n\n/**\n * Map of Header styles \n */\nconst defaultHeaderStyle = {\n  'h1': (node, children) => /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 31\n  }, this),\n  'h2': (node, children) => /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 31\n  }, this),\n  'h3': (node, children) => /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 31\n  }, this)\n};\n\n/**\n * Default renderer of Text nodeTypes\n * @param {*} node \n * @returns \n */\nfunction defaultRenderText(node, format) {\n  var _node$format, _node$format$variants;\n  // iterate over variants array to append formatting\n  if (((_node$format = node.format) === null || _node$format === void 0 ? void 0 : (_node$format$variants = _node$format.variants) === null || _node$format$variants === void 0 ? void 0 : _node$format$variants.length) > 0) {\n    return node.format.variants.reduce((previousValue, currentValue) => {\n      var _format$currentValue, _format$currentValue2;\n      return (_format$currentValue = (_format$currentValue2 = format[currentValue]) === null || _format$currentValue2 === void 0 ? void 0 : _format$currentValue2.call(format, previousValue)) !== null && _format$currentValue !== void 0 ? _format$currentValue : null;\n    }, node.value);\n  }\n  // if no formatting, simply return the value of the text\n  return node.value;\n}\n\n/**\n * Renders an image based on a reference\n * @param {*} node \n */\nfunction defaultRenderImage(node) {\n  var _node$data;\n  const mimeType = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.mimetype;\n  if (mimeType && mimeType.startsWith('image')) {\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      src: node.data.path,\n      alt: 'reference'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 16\n    }, this);\n  }\n  return null;\n}\n\n/**\n * Appends a key to valid React Elements \n * (avoids having to pass an index everywhere)\n * @param {*} element \n * @param {*} key \n * @returns \n */\nfunction addKeyToElement(element, key) {\n  if ( /*#__PURE__*/isValidElement(element) && element.key === null) {\n    return /*#__PURE__*/cloneElement(element, {\n      key\n    });\n  }\n  return element;\n}\n\n/**\n * Iterates over an array of nodes and renders each node\n * @param {*} childNodes array of \n * @returns \n */\nfunction renderNodeList(childNodes, options) {\n  if (childNodes && options) {\n    return childNodes.map((node, index) => {\n      return addKeyToElement(renderNode(node, options), index);\n    });\n  }\n  return null;\n}\n\n/**\n * Renders an individual node based on nodeType.\n * Makes a recursive call to render any children of the current node (node.content)\n * @param {*} node \n * @param {*} options \n * @returns \n */\nfunction renderNode(node, options) {\n  var _nodeMap$node$nodeTyp3, _nodeMap$node$nodeTyp4;\n  const {\n    nodeMap,\n    textFormat,\n    headerStyle\n  } = options;\n\n  // null check\n  if (!node || !options) {\n    return null;\n  }\n  const children = node.content ? renderNodeList(node.content, options) : null;\n\n  // special case for header, since it requires processing of header styles\n  if (node.nodeType === 'header') {\n    var _nodeMap$node$nodeTyp;\n    return (_nodeMap$node$nodeTyp = nodeMap[node.nodeType]) === null || _nodeMap$node$nodeTyp === void 0 ? void 0 : _nodeMap$node$nodeTyp.call(nodeMap, node, children, headerStyle);\n  }\n\n  // special case for text, since it may require formatting (i.e bold, italic, underline)\n  if (node.nodeType === 'text') {\n    var _nodeMap$node$nodeTyp2;\n    return (_nodeMap$node$nodeTyp2 = nodeMap[node.nodeType]) === null || _nodeMap$node$nodeTyp2 === void 0 ? void 0 : _nodeMap$node$nodeTyp2.call(nodeMap, node, textFormat);\n  }\n\n  // use a map to render the current node based on its nodeType\n  // pass the children (if they exist)\n  return (_nodeMap$node$nodeTyp3 = (_nodeMap$node$nodeTyp4 = nodeMap[node.nodeType]) === null || _nodeMap$node$nodeTyp4 === void 0 ? void 0 : _nodeMap$node$nodeTyp4.call(nodeMap, node, children)) !== null && _nodeMap$node$nodeTyp3 !== void 0 ? _nodeMap$node$nodeTyp3 : null;\n}\n\n/**\n * Expose the utility as a public function mapJsonRichText.\n * Calling functions can choose to override various mappings and/or formatting \n * by passing in an `options` object that may contain overrides for `nodeMap`, `textFormat` and `headerStyle`\n * @param {*} json - the json response of a Multi Line rich text field\n * @param {*} options {nodeMap,  - override defaultNodeMap\n *                     textFormat, - override defaultTextFormat\n *                     headerStyle, - override defaultHeaderStyle \n *                     }\n * @returns a JSX representation of the JSON object\n */\nexport function mapJsonRichText(json) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // merge options override with default options for nodeMap, textFormat, and headerStyle\n  return renderNodeList(json, {\n    nodeMap: {\n      ...defaultNodeMap,\n      ...options.nodeMap\n    },\n    textFormat: {\n      ...defaultTextFormat,\n      ...options.textFormat\n    },\n    headerStyle: {\n      ...defaultHeaderStyle,\n      ...options.headerStyle\n    }\n  });\n}","map":{"version":3,"names":["React","isValidElement","cloneElement","jsxDEV","_jsxDEV","defaultNodeMap","header","node","children","style","_style$node$style","call","paragraph","fileName","_jsxFileName","lineNumber","columnNumber","unordered-list","ordered-list","list-item","table","table-body","table-row","table-data","href","data","target","value","text","format","defaultRenderText","defaultRenderImage","defaultTextFormat","defaultHeaderStyle","h1","h2","h3","_node$format","_node$format$variants","variants","length","reduce","previousValue","currentValue","_format$currentValue","_format$currentValue2","_node$data","mimeType","mimetype","startsWith","src","path","alt","addKeyToElement","element","key","renderNodeList","childNodes","options","map","index","renderNode","_nodeMap$node$nodeTyp3","_nodeMap$node$nodeTyp4","nodeMap","textFormat","headerStyle","content","nodeType","_nodeMap$node$nodeTyp","_nodeMap$node$nodeTyp2","mapJsonRichText","json","arguments","undefined"],"sources":["/Users/sandeep/Code/AEM React Headless/aem-guides-wknd-graphql-main/react-app/src/utils/renderRichText.js"],"sourcesContent":["/*\nCopyright 2022 Adobe\nAll Rights Reserved.\n\nNOTICE: Adobe permits you to use, modify, and distribute this file in\naccordance with the terms of the Adobe license agreement accompanying\nit.\n*/\nimport React, { isValidElement, cloneElement } from 'react';\n\n/**\n * Map of JSON nodeTypes to HTML formats\n */\nconst defaultNodeMap = {\n    'header': (node, children, style) => style[node.style]?.(node, children),\n    'paragraph': (node, children) => <p>{children}</p>,\n    'unordered-list': (node, children) => <ul>{children}</ul>,\n    'ordered-list': (node, children) => <ol>{children}</ol>,\n    'list-item': (node, children) => <li>{children}</li>,\n    'table': (node, children) => <table>{children}</table>,\n    'table-body': (node, children) => <tbody>{children}</tbody>,\n    'table-row': (node, children) => <tr>{children}</tr>,\n    'table-data': (node, children) => <td>{children}</td>,\n    'link': node => <a href={node.data.href} target={node.data.target}>{node.value}</a>,\n    'text': (node, format) => defaultRenderText(node, format),\n    'reference': (node) => defaultRenderImage(node),\n}\n\n/**\n * Map of JSON format variants to HTML equivalents\n */\nconst defaultTextFormat = {\n    'bold': (value) => <b>{value}</b>,\n    'italic': (value) => <i>{value}</i>,\n    'underline': (value) => <u>{value}</u>\n}\n\n/**\n * Map of Header styles \n */\nconst defaultHeaderStyle = {\n    'h1': (node, children) => <h1>{children}</h1>,\n    'h2': (node, children) => <h2>{children}</h2>,\n    'h3': (node, children) => <h3>{children}</h3>\n}\n\n/**\n * Default renderer of Text nodeTypes\n * @param {*} node \n * @returns \n */\nfunction defaultRenderText(node, format) {\n    // iterate over variants array to append formatting\n    if (node.format?.variants?.length > 0) {\n        return node.format.variants.reduce((previousValue, currentValue) => {\n            return format[currentValue]?.(previousValue) ?? null;\n        }, node.value);\n    }\n    // if no formatting, simply return the value of the text\n    return node.value;\n}\n\n/**\n * Renders an image based on a reference\n * @param {*} node \n */\nfunction defaultRenderImage(node) {\n    const mimeType = node.data?.mimetype;\n    if(mimeType && mimeType.startsWith('image')) {\n        return <img src={node.data.path} alt={'reference'} />\n    }\n    return null;\n}\n\n/**\n * Appends a key to valid React Elements \n * (avoids having to pass an index everywhere)\n * @param {*} element \n * @param {*} key \n * @returns \n */\nfunction addKeyToElement(element, key) {\n    if (isValidElement(element) && element.key === null) {\n      return cloneElement(element, { key });\n    }\n    return element;\n}\n\n/**\n * Iterates over an array of nodes and renders each node\n * @param {*} childNodes array of \n * @returns \n */\nfunction renderNodeList(childNodes, options) {\n    if(childNodes && options) {\n        return childNodes.map((node, index) => {\n            return addKeyToElement(renderNode(node, options), index);\n        });\n    }\n\n    return null;\n}\n\n/**\n * Renders an individual node based on nodeType.\n * Makes a recursive call to render any children of the current node (node.content)\n * @param {*} node \n * @param {*} options \n * @returns \n */\nfunction renderNode(node, options) {\n    const {nodeMap, textFormat, headerStyle} = options;\n\n    // null check\n    if(!node || !options) {\n        return null;\n    }\n\n    const children = node.content ? renderNodeList(node.content, options) : null;\n\n    // special case for header, since it requires processing of header styles\n    if(node.nodeType === 'header') {\n        return nodeMap[node.nodeType]?.(node, children, headerStyle);\n    }\n\n    // special case for text, since it may require formatting (i.e bold, italic, underline)\n    if(node.nodeType === 'text') {\n        return nodeMap[node.nodeType]?.(node, textFormat);\n    }\n\n    // use a map to render the current node based on its nodeType\n    // pass the children (if they exist)\n    return nodeMap[node.nodeType]?.(node, children) ?? null;\n}\n\n/**\n * Expose the utility as a public function mapJsonRichText.\n * Calling functions can choose to override various mappings and/or formatting \n * by passing in an `options` object that may contain overrides for `nodeMap`, `textFormat` and `headerStyle`\n * @param {*} json - the json response of a Multi Line rich text field\n * @param {*} options {nodeMap,  - override defaultNodeMap\n *                     textFormat, - override defaultTextFormat\n *                     headerStyle, - override defaultHeaderStyle \n *                     }\n * @returns a JSX representation of the JSON object\n */\nexport function mapJsonRichText(json, options={}) {\n    // merge options override with default options for nodeMap, textFormat, and headerStyle\n    return renderNodeList(json , {\n        nodeMap: {\n            ...defaultNodeMap,\n            ...options.nodeMap,\n        },\n        textFormat: {\n            ...defaultTextFormat,\n            ...options.textFormat,\n        },\n        headerStyle: {\n            ...defaultHeaderStyle,\n            ...options.headerStyle\n        }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
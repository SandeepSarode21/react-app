{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/*\nCopyright 2022 Adobe\nAll Rights Reserved.\n\nNOTICE: Adobe permits you to use, modify, and distribute this file in\naccordance with the terms of the Adobe license agreement accompanying\nit.\n*/\n\nimport { useEffect, useState } from \"react\";\nimport aemHeadlessClient from \"./aemHeadlessClient\";\n\n/**\n * This file contains the React useEffect custom hooks that:\n * 1. Are called by the React components\n * 2. To get data from AEM GraphQL persisted queries\n *\n * Each custom hook maps to a persisted query and is responsible for:\n * 1. Calling the AEM persisted query\n * 2. Collecting and transforming the returned data into the format expected by the React view components\n * 3. Setting and returning any error state\n */\n\n/**\n * Private, shared function that invokes the AEM Headless client.\n * \n * @param {String} persistedQueryName the fully qualified name of the persisted query\n * @param {*} queryParameters an optional JavaScript object containing query parameters\n * @returns the GraphQL data or an error message \n */\nasync function fetchPersistedQuery(persistedQueryName, queryParameters) {\n  let data;\n  let err;\n  try {\n    // AEM GraphQL queries are asynchronous, either await their return or use Promise-based .then(..) { ... } syntax\n    const response = await aemHeadlessClient.runPersistedQuery(persistedQueryName, queryParameters);\n    // The GraphQL data is stored on the response's data field\n    data = response === null || response === void 0 ? void 0 : response.data;\n  } catch (e) {\n    var _e$toJSON, _e$toJSON$map;\n    // An error occurred, return the error messages\n    err = (_e$toJSON = e.toJSON()) === null || _e$toJSON === void 0 ? void 0 : (_e$toJSON$map = _e$toJSON.map(error => error.message)) === null || _e$toJSON$map === void 0 ? void 0 : _e$toJSON$map.join(\", \");\n    console.error(e.toJSON());\n  }\n  return {\n    data,\n    err\n  };\n}\n\n/**\n * React custom hook that returns a list of adevntures by activity. If no activity is provided, all adventures are returned.\n * \n * Custom hook that calls the 'wknd-shared/adventures-all' or 'wknd-shared/adventures-by-activity' persisted query.\n *\n * @returns an array of Adventure JSON objects, and array of errors\n */\nexport function useAdventuresByActivity(adventureActivity) {\n  _s();\n  const [adventures, setAdventures] = useState(null);\n  const [errors, setErrors] = useState(null);\n\n  // Use React useEffect to manage state changes\n  useEffect(() => {\n    async function fetchData() {\n      var _response$data, _response$data$advent;\n      let response;\n\n      // if an activity is set (i.e \"Camping\", \"Hiking\"...) call wknd-shared/adventures-by-activity query\n      if (adventureActivity) {\n        // The key is 'activity' as defined in the persisted query\n        const queryParameters = {\n          activity: adventureActivity\n        };\n\n        // Call the AEM GraphQL persisted query named \"wknd-shared/adventures-by-activity\" with parameters\n        response = await fetchPersistedQuery(\"wknd-shared/adventures-by-activity\", queryParameters);\n      } else {\n        // Call the AEM GraphQL persisted query named \"wknd-shared/adventures-all\"\n        response = await fetchPersistedQuery(\"humana-sample-tenant/getTeaserByTitle\");\n      }\n\n      // Sets the adventures variable to the list of adventure JSON objects\n      setAdventures((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$advent = _response$data.adventureList) === null || _response$data$advent === void 0 ? void 0 : _response$data$advent.items);\n\n      // Set any errors\n      setErrors(response.err);\n    }\n    // Call the internal fetchData() as per React best practices\n    fetchData();\n  }, [adventureActivity]);\n\n  // Returns the adventures and errors\n  return {\n    adventures,\n    errors\n  };\n}\n\n/**\n * Calls the 'wknd-shared/adventure-by-slug' persisted query with `slug` parameter.\n *\n * @param {String!} slugName the adventure slug\n * @returns a JSON object representing the Adventure\n */\n_s(useAdventuresByActivity, \"+nJC9V+UjfaC+JMv8zBghG5Ja/I=\");\nexport function useAdventureBySlug(slugName) {\n  _s2();\n  const [adventure, setAdventure] = useState(null);\n  const [references, setReferences] = useState(null);\n  const [errors, setErrors] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      var _response$data2, _response$data2$adven, _response$data2$adven2;\n      let response;\n\n      // The key is 'slug' as defined in the persisted query\n      const queryParameters = {\n        slug: slugName\n      };\n\n      // Call the AEM GraphQL persisted query named \"wknd-shared/adventure-by-slug\" with parameters\n      response = await fetchPersistedQuery(\"wknd-shared/adventure-by-slug\", queryParameters);\n      if (response.err) {\n        // Capture errors from the HTTP request\n        setErrors(response.err);\n      } else if (((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$adven = _response$data2.adventureList) === null || _response$data2$adven === void 0 ? void 0 : (_response$data2$adven2 = _response$data2$adven.items) === null || _response$data2$adven2 === void 0 ? void 0 : _response$data2$adven2.length) === 1) {\n        // Set the Adventure data after data validation\n        setAdventure(response.data.adventureList.items[0]);\n        setReferences(response.data.adventureList._references);\n      } else {\n        // Set an error if no Adventure could be found\n        setErrors(`Cannot find Adventure with slug: ${slugName}`);\n      }\n    }\n\n    // Call the internal fetchData() as per React best practices\n    fetchData();\n  }, [slugName]);\n  return {\n    adventure,\n    references,\n    errors\n  };\n}\n_s2(useAdventureBySlug, \"G2hs0Sj39bP//58Gk8Q+vLPcpa0=\");","map":{"version":3,"names":["useEffect","useState","aemHeadlessClient","fetchPersistedQuery","persistedQueryName","queryParameters","data","err","response","runPersistedQuery","e","_e$toJSON","_e$toJSON$map","toJSON","map","error","message","join","console","useAdventuresByActivity","adventureActivity","_s","adventures","setAdventures","errors","setErrors","fetchData","_response$data","_response$data$advent","activity","adventureList","items","useAdventureBySlug","slugName","_s2","adventure","setAdventure","references","setReferences","_response$data2","_response$data2$adven","_response$data2$adven2","slug","length","_references"],"sources":["/Users/sandeep/Code/AEM React Headless/aem-guides-wknd-graphql-main/react-app/src/api/usePersistedQueries.js"],"sourcesContent":["/*\nCopyright 2022 Adobe\nAll Rights Reserved.\n\nNOTICE: Adobe permits you to use, modify, and distribute this file in\naccordance with the terms of the Adobe license agreement accompanying\nit.\n*/\n\nimport { useEffect, useState } from \"react\";\nimport aemHeadlessClient from \"./aemHeadlessClient\";\n\n/**\n * This file contains the React useEffect custom hooks that:\n * 1. Are called by the React components\n * 2. To get data from AEM GraphQL persisted queries\n *\n * Each custom hook maps to a persisted query and is responsible for:\n * 1. Calling the AEM persisted query\n * 2. Collecting and transforming the returned data into the format expected by the React view components\n * 3. Setting and returning any error state\n */\n\n/**\n * Private, shared function that invokes the AEM Headless client.\n * \n * @param {String} persistedQueryName the fully qualified name of the persisted query\n * @param {*} queryParameters an optional JavaScript object containing query parameters\n * @returns the GraphQL data or an error message \n */\nasync function fetchPersistedQuery(persistedQueryName, queryParameters) {\n  let data;\n  let err;\n\n  try {\n    // AEM GraphQL queries are asynchronous, either await their return or use Promise-based .then(..) { ... } syntax\n    const response = await aemHeadlessClient.runPersistedQuery(\n      persistedQueryName,\n      queryParameters\n    );\n    // The GraphQL data is stored on the response's data field\n    data = response?.data;\n  } catch (e) {\n    // An error occurred, return the error messages\n    err = e\n      .toJSON()\n      ?.map((error) => error.message)\n      ?.join(\", \");\n    console.error(e.toJSON());\n  }\n\n  return { data, err };\n}\n\n/**\n * React custom hook that returns a list of adevntures by activity. If no activity is provided, all adventures are returned.\n * \n * Custom hook that calls the 'wknd-shared/adventures-all' or 'wknd-shared/adventures-by-activity' persisted query.\n *\n * @returns an array of Adventure JSON objects, and array of errors\n */\nexport function useAdventuresByActivity(adventureActivity) {\n\n  const [adventures, setAdventures] = useState(null);\n  const [errors, setErrors] = useState(null);\n\n  // Use React useEffect to manage state changes\n  useEffect(() => {\n    async function fetchData() {\n\n      let response;\n\n      // if an activity is set (i.e \"Camping\", \"Hiking\"...) call wknd-shared/adventures-by-activity query\n      if (adventureActivity) {\n        // The key is 'activity' as defined in the persisted query\n        const queryParameters = { activity: adventureActivity };\n\n        // Call the AEM GraphQL persisted query named \"wknd-shared/adventures-by-activity\" with parameters\n        response = await fetchPersistedQuery(\"wknd-shared/adventures-by-activity\", queryParameters);\n      } else {\n        // Call the AEM GraphQL persisted query named \"wknd-shared/adventures-all\"\n        response = await fetchPersistedQuery(\"humana-sample-tenant/getTeaserByTitle\");\n\n        \n      }\n\n      // Sets the adventures variable to the list of adventure JSON objects\n      setAdventures(response.data?.adventureList?.items);\n\n      // Set any errors\n      setErrors(response.err);\n    }\n    // Call the internal fetchData() as per React best practices\n    fetchData();\n\n  }, [adventureActivity]);\n\n  // Returns the adventures and errors\n  return { adventures, errors };\n}\n\n/**\n * Calls the 'wknd-shared/adventure-by-slug' persisted query with `slug` parameter.\n *\n * @param {String!} slugName the adventure slug\n * @returns a JSON object representing the Adventure\n */\nexport function useAdventureBySlug(slugName) {\n  const [adventure, setAdventure] = useState(null);\n  const [references, setReferences] = useState(null);\n  const [errors, setErrors] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n\n      let response;\n\n      // The key is 'slug' as defined in the persisted query\n      const queryParameters = { slug: slugName };\n\n      // Call the AEM GraphQL persisted query named \"wknd-shared/adventure-by-slug\" with parameters\n      response = await fetchPersistedQuery(\n        \"wknd-shared/adventure-by-slug\",\n        queryParameters\n      );\n\n      if (response.err) {\n        // Capture errors from the HTTP request\n        setErrors(response.err);\n      } else if (response.data?.adventureList?.items?.length === 1) {\n        // Set the Adventure data after data validation\n        setAdventure(response.data.adventureList.items[0]);\n        setReferences(response.data.adventureList._references);\n      } else {\n        // Set an error if no Adventure could be found\n        setErrors(`Cannot find Adventure with slug: ${slugName}`);\n      }\n\n    }\n\n    // Call the internal fetchData() as per React best practices\n    fetchData();\n\n  }, [slugName]);\n\n  return { adventure, references, errors };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
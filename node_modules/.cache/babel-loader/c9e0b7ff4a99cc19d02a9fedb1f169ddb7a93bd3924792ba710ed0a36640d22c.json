{"ast":null,"code":"require('../types'); // eslint-disable-line\nconst {\n  AEM_GRAPHQL_TYPES\n} = require('./config');\n\n/**\n *\n * @private\n * @param {object} obj - object representing query arguments\n * @returns {string} - query args as a string\n */\nfunction objToStringArgs(obj) {\n  let str = '';\n  for (const [key, value] of Object.entries(obj)) {\n    let val = typeof value === 'string' ? `\"${value}\"` : value;\n    val = typeof value === 'object' ? `{ ${objToStringArgs(value)} }` : val;\n    str += `${key}:${val}\\n`;\n  }\n  return str;\n}\n\n/**\n * Returns a Query for model by path\n *\n * @private\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields.\n * @param {ModelByPathArgs} args - Query arguments\n * @returns {QueryBuilderResult}\n */\nconst __modelByPath = (model, fields, args) => {\n  if (!args || !args._path) {\n    throw new Error('Missing required param \"_path\"');\n  }\n  const type = AEM_GRAPHQL_TYPES.BY_PATH;\n  const query = `{\n    ${model}${type}(\n      ${objToStringArgs(args)}\n    ) {\n      item ${fields}\n    }\n  }`;\n  return {\n    type,\n    query\n  };\n};\n\n/**\n * Returns a Query for model list\n *\n * @private\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields.\n * @param {ModelListArgs} [args={}] - Query arguments\n * @returns {QueryBuilderResult}\n */\nconst __modelList = function (model, fields) {\n  let args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const type = AEM_GRAPHQL_TYPES.LIST;\n  const query = `{\n    ${model}${type}(\n      ${objToStringArgs(args)}\n    ) {\n      items ${fields}\n    }\n  }`;\n  return {\n    type,\n    query\n  };\n};\n\n/**\n * Returns a Query for model list\n *\n * @private\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields.\n * @param {ModelPaginatedArgs} [args={}] - Query arguments\n * @returns {QueryBuilderResult}\n */\nconst __modelPaginated = function (model, fields) {\n  let args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const type = AEM_GRAPHQL_TYPES.PAGINATED;\n  const query = `{\n    ${model}${type}(\n      ${objToStringArgs(args)}\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node ${fields}\n        cursor\n      }\n    }\n  }`;\n  return {\n    type,\n    query\n  };\n};\nconst getQueryType = function () {\n  let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (args._path) {\n    return AEM_GRAPHQL_TYPES.BY_PATH;\n  }\n  if (args.useLimitOffset) {\n    return AEM_GRAPHQL_TYPES.LIST;\n  }\n  return AEM_GRAPHQL_TYPES.PAGINATED;\n};\n\n/**\n * Builds a GraphQL query string for the given parameters.\n *\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields\n * @param {ModelConfig} [config={}] - Pagination config\n * @param {ModelArgs} [args={}] - Query arguments\n * @returns {QueryBuilderResult} - object with The GraphQL query string and type\n */\nconst graphQLQueryBuilder = function (model, fields) {\n  let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let args = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (args._path) {\n    return __modelByPath(model, fields, args);\n  }\n  if (config.useLimitOffset) {\n    args.limit = args.limit || config.pageSize || 10;\n    if (config.after) {\n      args.offset = args.offset || config.after;\n    }\n    return __modelList(model, fields, args);\n  }\n  if (config.pageSize) {\n    args.first = args.first || config.pageSize;\n  }\n  if (config.after) {\n    args.after = args.after || config.after;\n  }\n  return __modelPaginated(model, fields, args);\n};\nmodule.exports = {\n  graphQLQueryBuilder,\n  getQueryType\n};","map":{"version":3,"names":["require","AEM_GRAPHQL_TYPES","objToStringArgs","obj","str","key","value","Object","entries","val","__modelByPath","model","fields","args","_path","Error","type","BY_PATH","query","__modelList","arguments","length","undefined","LIST","__modelPaginated","PAGINATED","getQueryType","useLimitOffset","graphQLQueryBuilder","config","limit","pageSize","after","offset","first","module","exports"],"sources":["/Users/sandeep/Code/AEM React Headless/aem-guides-wknd-graphql-main/react-app/node_modules/@adobe/aem-headless-client-js/src/utils/GraphQLQueryBuilder.js"],"sourcesContent":["require('../types') // eslint-disable-line\nconst { AEM_GRAPHQL_TYPES } = require('./config')\n\n/**\n *\n * @private\n * @param {object} obj - object representing query arguments\n * @returns {string} - query args as a string\n */\nfunction objToStringArgs (obj) {\n  let str = ''\n  for (const [key, value] of Object.entries(obj)) {\n    let val = typeof value === 'string' ? `\"${value}\"` : value\n    val = typeof value === 'object' ? `{ ${objToStringArgs(value)} }` : val\n    str += `${key}:${val}\\n`\n  }\n  return str\n}\n\n/**\n * Returns a Query for model by path\n *\n * @private\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields.\n * @param {ModelByPathArgs} args - Query arguments\n * @returns {QueryBuilderResult}\n */\nconst __modelByPath = (model, fields, args) => {\n  if (!args || !args._path) {\n    throw new Error('Missing required param \"_path\"')\n  }\n  const type = AEM_GRAPHQL_TYPES.BY_PATH\n  const query = `{\n    ${model}${type}(\n      ${objToStringArgs(args)}\n    ) {\n      item ${fields}\n    }\n  }`\n\n  return {\n    type,\n    query\n  }\n}\n\n/**\n * Returns a Query for model list\n *\n * @private\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields.\n * @param {ModelListArgs} [args={}] - Query arguments\n * @returns {QueryBuilderResult}\n */\nconst __modelList = (model, fields, args = {}) => {\n  const type = AEM_GRAPHQL_TYPES.LIST\n  const query = `{\n    ${model}${type}(\n      ${objToStringArgs(args)}\n    ) {\n      items ${fields}\n    }\n  }`\n\n  return {\n    type,\n    query\n  }\n}\n\n/**\n * Returns a Query for model list\n *\n * @private\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields.\n * @param {ModelPaginatedArgs} [args={}] - Query arguments\n * @returns {QueryBuilderResult}\n */\nconst __modelPaginated = (model, fields, args = {}) => {\n  const type = AEM_GRAPHQL_TYPES.PAGINATED\n  const query = `{\n    ${model}${type}(\n      ${objToStringArgs(args)}\n    ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node ${fields}\n        cursor\n      }\n    }\n  }`\n\n  return {\n    type,\n    query\n  }\n}\n\nconst getQueryType = (args = {}) => {\n  if (args._path) {\n    return AEM_GRAPHQL_TYPES.BY_PATH\n  }\n\n  if (args.useLimitOffset) {\n    return AEM_GRAPHQL_TYPES.LIST\n  }\n\n  return AEM_GRAPHQL_TYPES.PAGINATED\n}\n\n/**\n * Builds a GraphQL query string for the given parameters.\n *\n * @param {string} model - contentFragment Model Name\n * @param {string} fields - The query string for item fields\n * @param {ModelConfig} [config={}] - Pagination config\n * @param {ModelArgs} [args={}] - Query arguments\n * @returns {QueryBuilderResult} - object with The GraphQL query string and type\n */\nconst graphQLQueryBuilder = (model, fields, config = {}, args = {}) => {\n  if (args._path) {\n    return __modelByPath(model, fields, args)\n  }\n\n  if (config.useLimitOffset) {\n    args.limit = args.limit || config.pageSize || 10\n    if (config.after) {\n      args.offset = args.offset || config.after\n    }\n    return __modelList(model, fields, args)\n  }\n\n  if (config.pageSize) {\n    args.first = args.first || config.pageSize\n  }\n\n  if (config.after) {\n    args.after = args.after || config.after\n  }\n\n  return __modelPaginated(model, fields, args)\n}\n\nmodule.exports = {\n  graphQLQueryBuilder,\n  getQueryType\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}